{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "41e510a7-1da3-4d3a-bf19-576e8240dbf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "class Account:\n",
    "    \"\"\"\n",
    "    A simple Bank Account class with owner and balance attributes,\n",
    "    and methods to deposit and withdraw money.\n",
    "    \"\"\"\n",
    "    def __init__(self, owner, balance=0):\n",
    "        \"\"\"\n",
    "        Initialize an account with an owner and an optional starting balance.\n",
    "        \"\"\"\n",
    "        self.owner = owner\n",
    "        self.balance = balance\n",
    "\n",
    "    def __str__(self):\n",
    "        \"\"\"\n",
    "        Return a user-friendly string to show the account balance.\n",
    "        \"\"\"\n",
    "        return f'Account owner: {self.owner}\\nAccount balance: {self.balance}'\n",
    "\n",
    "    def deposit(self, amount: float) -> float:\n",
    "        \"\"\"\n",
    "        Deposit money to the account, add deposit to the account balance.\n",
    "\n",
    "        Parameters: \n",
    "            amount (float): Total amount of money to deposit.\n",
    "\n",
    "        Returns:\n",
    "            float: The updated account balance.\n",
    "    \n",
    "        \"\"\"\n",
    "        if not isinstance(amount, (int, float)) or isinstance(amount, bool):\n",
    "            raise TypeError(\"Deposit amount must be numeric\")\n",
    "        if amount <= 0:\n",
    "            raise ValueError(\"Negative amounts dont work, silly goose.\")\n",
    "        self.balance += amount\n",
    "        return self.balance\n",
    "\n",
    "    def withdraw(self, amount: float) -> float:\n",
    "        \"\"\"\n",
    "    Withdraw money out of the account if enough is available.\n",
    "\n",
    "    Parameters:\n",
    "        amount (float): The amount of money to withdraw.\n",
    "\n",
    "    Returns:\n",
    "        float: The updated account balance if successful.\n",
    "\n",
    "    Raises:\n",
    "        TypeError: If the amount is not numeric.\n",
    "        ValueError: If the amount is non-positive or exceeds balance.\n",
    "    \"\"\"\n",
    "        if not isinstance(amount, (int, float)) or isinstance(amount, bool):\n",
    "            raise TypeError(\"Withdrawal amount must be numeric\")\n",
    "        if amount <= 0:\n",
    "            raise ValueError(\"Withdrawal amount must be positive.\")\n",
    "        if amount > self.balance:\n",
    "            raise ValueError(\"Insufficient funds\")\n",
    "        self.balance -= amount\n",
    "        return self.balance\n",
    "                    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a7afaf25-6150-4e9f-b199-e4c23565d9e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Account owner: Neo\n",
      "Account balance: 100\n",
      "\n",
      "Depositing 50...\n",
      "New balance: 150\n",
      "Deposit error: Deposit amount must be numeric\n",
      "Deposit error: Negative amounts dont work, silly goose.\n",
      "\n",
      "Withdrawing 30...\n",
      "New balance: 120\n",
      "Withdrawal error: Insufficient funds\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    # Demo: create account\n",
    "    acct = Account(\"Neo\", 100)\n",
    "    print(acct)  # -> Account owner: Neo, Account balance: 100\n",
    "\n",
    "    # Valid deposit\n",
    "    print(\"\\nDepositing 50...\")\n",
    "    print(\"New balance:\", acct.deposit(50))\n",
    "\n",
    "    # Invalid deposit (string)\n",
    "    try:\n",
    "        acct.deposit(\"50\")\n",
    "    except Exception as e:\n",
    "        print(\"Deposit error:\", e)\n",
    "\n",
    "    # Invalid deposit (negative)\n",
    "    try:\n",
    "        acct.deposit(-20)\n",
    "    except Exception as e:\n",
    "        print(\"Deposit error:\", e)\n",
    "\n",
    "    # Valid withdrawal\n",
    "    print(\"\\nWithdrawing 30...\")\n",
    "    print(\"New balance:\", acct.withdraw(30))\n",
    "\n",
    "    # Invalid withdrawal (too much)\n",
    "    try:\n",
    "        acct.withdraw(1000)\n",
    "    except Exception as e:\n",
    "        print(\"Withdrawal error:\", e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0682b60e-f98e-4a1b-a08d-f4c7b7376a23",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
